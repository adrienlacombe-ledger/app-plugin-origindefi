"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var hw_transport_1 = __importDefault(require("@ledgerhq/hw-transport"));
var logs_1 = require("@ledgerhq/logs");
/**
 * create a transport replayer with a record store.
 * @param recordStore
 */
var createTransportReplayer = function (recordStore) {
    console.warn("TO BE DEPRECATED: use openTransportReplayer instead");
    var TransportReplayer = /** @class */ (function (_super) {
        __extends(TransportReplayer, _super);
        function TransportReplayer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TransportReplayer.prototype.setScrambleKey = function () { };
        TransportReplayer.prototype.close = function () {
            return Promise.resolve();
        };
        TransportReplayer.prototype.exchange = function (apdu) {
            (0, logs_1.log)("apdu", apdu.toString("hex"));
            try {
                var buffer = recordStore.replayExchange(apdu);
                (0, logs_1.log)("apdu", buffer.toString("hex"));
                return Promise.resolve(buffer);
            }
            catch (e) {
                (0, logs_1.log)("apdu-error", String(e));
                return Promise.reject(e);
            }
        };
        TransportReplayer.isSupported = function () { return Promise.resolve(true); };
        TransportReplayer.list = function () { return Promise.resolve([null]); };
        TransportReplayer.listen = function (o) {
            var unsubscribed;
            setTimeout(function () {
                if (unsubscribed)
                    return;
                o.next({
                    type: "add",
                    descriptor: null
                });
                o.complete();
            }, 0);
            return {
                unsubscribe: function () {
                    unsubscribed = true;
                }
            };
        };
        TransportReplayer.open = function () { return Promise.resolve(new TransportReplayer()); };
        return TransportReplayer;
    }(hw_transport_1["default"]));
    return TransportReplayer;
};
exports["default"] = createTransportReplayer;
//# sourceMappingURL=createTransportReplayer.js.map