import Transport from "@ledgerhq/hw-transport";
import { log } from "@ledgerhq/logs";
export class TransportReplayer extends Transport {
    constructor(recordStore) {
        super();
        this.artificialExchangeDelay = 0;
        this.recordStore = recordStore;
    }
    setArtificialExchangeDelay(delay) {
        this.artificialExchangeDelay = delay;
    }
    setScrambleKey() { }
    close() {
        return Promise.resolve();
    }
    exchange(apdu) {
        log("apdu", apdu.toString("hex"));
        try {
            const buffer = this.recordStore.replayExchange(apdu);
            log("apdu", buffer.toString("hex"));
            if (this.artificialExchangeDelay) {
                return new Promise(resolve => {
                    setTimeout(() => {
                        resolve(buffer);
                        this.setArtificialExchangeDelay(0);
                    }, this.artificialExchangeDelay);
                });
            }
            else {
                return Promise.resolve(buffer);
            }
        }
        catch (e) {
            log("apdu-error", String(e));
            return Promise.reject(e);
        }
    }
}
TransportReplayer.isSupported = () => Promise.resolve(true);
TransportReplayer.list = () => Promise.resolve([null]);
TransportReplayer.listen = o => {
    let unsubscribed;
    setTimeout(() => {
        if (unsubscribed)
            return;
        o.next({
            type: "add",
            descriptor: null,
        });
        o.complete();
    }, 0);
    return {
        unsubscribe: () => {
            unsubscribed = true;
        },
    };
};
TransportReplayer.open = (recordStore) => Promise.resolve(new TransportReplayer(recordStore));
/**
 * create a transport replayer with a record store.
 * @param recordStore
 */
const openTransportReplayer = (recordStore) => {
    return TransportReplayer.open(recordStore);
};
export default openTransportReplayer;
//# sourceMappingURL=openTransportReplayer.js.map