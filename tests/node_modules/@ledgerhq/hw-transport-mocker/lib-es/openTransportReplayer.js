var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import Transport from "@ledgerhq/hw-transport";
import { log } from "@ledgerhq/logs";
var TransportReplayer = /** @class */ (function (_super) {
    __extends(TransportReplayer, _super);
    function TransportReplayer(recordStore) {
        var _this = _super.call(this) || this;
        _this.artificialExchangeDelay = 0;
        _this.recordStore = recordStore;
        return _this;
    }
    TransportReplayer.prototype.setArtificialExchangeDelay = function (delay) {
        this.artificialExchangeDelay = delay;
    };
    TransportReplayer.prototype.setScrambleKey = function () { };
    TransportReplayer.prototype.close = function () {
        return Promise.resolve();
    };
    TransportReplayer.prototype.exchange = function (apdu) {
        var _this = this;
        log("apdu", apdu.toString("hex"));
        try {
            var buffer_1 = this.recordStore.replayExchange(apdu);
            log("apdu", buffer_1.toString("hex"));
            if (this.artificialExchangeDelay) {
                return new Promise(function (resolve) {
                    setTimeout(function () {
                        resolve(buffer_1);
                        _this.setArtificialExchangeDelay(0);
                    }, _this.artificialExchangeDelay);
                });
            }
            else {
                return Promise.resolve(buffer_1);
            }
        }
        catch (e) {
            log("apdu-error", String(e));
            return Promise.reject(e);
        }
    };
    TransportReplayer.isSupported = function () { return Promise.resolve(true); };
    TransportReplayer.list = function () { return Promise.resolve([null]); };
    TransportReplayer.listen = function (o) {
        var unsubscribed;
        setTimeout(function () {
            if (unsubscribed)
                return;
            o.next({
                type: "add",
                descriptor: null
            });
            o.complete();
        }, 0);
        return {
            unsubscribe: function () {
                unsubscribed = true;
            }
        };
    };
    TransportReplayer.open = function (recordStore) {
        return Promise.resolve(new TransportReplayer(recordStore));
    };
    return TransportReplayer;
}(Transport));
export { TransportReplayer };
/**
 * create a transport replayer with a record store.
 * @param recordStore
 */
var openTransportReplayer = function (recordStore) {
    return TransportReplayer.open(recordStore);
};
export default openTransportReplayer;
//# sourceMappingURL=openTransportReplayer.js.map