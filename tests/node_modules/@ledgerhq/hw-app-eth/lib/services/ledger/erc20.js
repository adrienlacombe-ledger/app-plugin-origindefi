"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.byContractAddressAndChainId = exports.findERC20SignaturesInfo = void 0;
var axios_1 = __importDefault(require("axios"));
var logs_1 = require("@ledgerhq/logs");
var index_1 = require("@ledgerhq/cryptoassets/data/evm/index");
var loadConfig_1 = require("./loadConfig");
var asContractAddress = function (addr) {
    var a = addr.toLowerCase();
    return a.startsWith("0x") ? a : "0x" + a;
};
var findERC20SignaturesInfo = function (userLoadConfig, chainId) { return __awaiter(void 0, void 0, void 0, function () {
    var cryptoassetsBaseURL, url, blob;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                cryptoassetsBaseURL = (0, loadConfig_1.getLoadConfig)(userLoadConfig).cryptoassetsBaseURL;
                if (!cryptoassetsBaseURL)
                    return [2 /*return*/, null];
                url = "".concat(cryptoassetsBaseURL, "/evm/").concat(chainId, "/erc20-signatures.json");
                return [4 /*yield*/, axios_1["default"]
                        .get(url)
                        .then(function (_a) {
                        var data = _a.data;
                        if (!data || typeof data !== "string") {
                            throw new Error("ERC20 signatures for chainId ".concat(chainId, " file is malformed ").concat(url));
                        }
                        return data;
                    })["catch"](function (e) {
                        (0, logs_1.log)("error", "could not fetch from " + url + ": " + String(e));
                        return null;
                    })];
            case 1:
                blob = _a.sent();
                return [2 /*return*/, blob];
        }
    });
}); };
exports.findERC20SignaturesInfo = findERC20SignaturesInfo;
/**
 * Retrieve the token information by a given contract address if any
 */
var byContractAddressAndChainId = function (contract, chainId, erc20SignaturesBlob) {
    var _a, _b;
    // If we are able to fetch data from s3 bucket that contains dynamic CAL
    if (erc20SignaturesBlob) {
        try {
            return parse(erc20SignaturesBlob).byContractAndChainId(asContractAddress(contract), chainId);
        }
        catch (e) {
            return (_a = get(chainId)) === null || _a === void 0 ? void 0 : _a.byContractAndChainId(asContractAddress(contract), chainId);
        }
    }
    // the static fallback when dynamic cal is not provided
    return (_b = get(chainId)) === null || _b === void 0 ? void 0 : _b.byContractAndChainId(asContractAddress(contract), chainId);
};
exports.byContractAddressAndChainId = byContractAddressAndChainId;
var parse = function (erc20SignaturesBlob) {
    var buf = Buffer.from(erc20SignaturesBlob, "base64");
    var map = {};
    var entries = [];
    var i = 0;
    while (i < buf.length) {
        var length_1 = buf.readUInt32BE(i);
        i += 4;
        var item = buf.slice(i, i + length_1);
        var j = 0;
        var tickerLength = item.readUInt8(j);
        j += 1;
        var ticker = item.slice(j, j + tickerLength).toString("ascii");
        j += tickerLength;
        var contractAddress = asContractAddress(item.slice(j, j + 20).toString("hex"));
        j += 20;
        var decimals = item.readUInt32BE(j);
        j += 4;
        var chainId = item.readUInt32BE(j);
        j += 4;
        var signature = item.slice(j);
        var entry = {
            ticker: ticker,
            contractAddress: contractAddress,
            decimals: decimals,
            chainId: chainId,
            signature: signature,
            data: item
        };
        entries.push(entry);
        map[String(chainId) + ":" + contractAddress] = entry;
        i += length_1;
    }
    return {
        list: function () { return entries; },
        byContractAndChainId: function (contractAddress, chainId) {
            return map[String(chainId) + ":" + contractAddress];
        }
    };
};
// this internal get() will lazy load and cache the data from the erc20 data blob
var get = (function () {
    var cache = {};
    return function (chainId) {
        if (cache[chainId])
            return cache[chainId];
        var signatureBlob = index_1.signatures[chainId];
        if (!signatureBlob)
            return null;
        var api = parse(signatureBlob);
        cache[chainId] = api;
        return api;
    };
})();
//# sourceMappingURL=erc20.js.map