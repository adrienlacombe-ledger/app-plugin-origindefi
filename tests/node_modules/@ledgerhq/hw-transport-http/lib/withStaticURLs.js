"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const HttpTransport_1 = __importDefault(require("./HttpTransport"));
const WebSocketTransport_1 = __importDefault(require("./WebSocketTransport"));
const hw_transport_1 = __importDefault(require("@ledgerhq/hw-transport"));
const getTransport = url => (!url.startsWith("ws") ? HttpTransport_1.default : WebSocketTransport_1.default);
const inferURLs = (urls) => __awaiter(void 0, void 0, void 0, function* () {
    const r = yield (typeof urls === "function" ? urls() : urls);
    return typeof r === "string" ? [r] : r;
});
exports.default = (urls) => {
    class StaticTransport extends hw_transport_1.default {
    }
    StaticTransport.isSupported = HttpTransport_1.default.isSupported;
    StaticTransport.list = () => inferURLs(urls)
        .then(urls => Promise.all(urls.map(url => getTransport(url)
        .check(url)
        .then(() => [url])
        .catch(() => []))))
        .then(arrs => arrs.reduce((acc, a) => acc.concat(a), []));
    StaticTransport.listen = (observer) => {
        let unsubscribed = false;
        const seen = {};
        function checkLoop() {
            if (unsubscribed)
                return;
            inferURLs(urls)
                .then(urls => Promise.all(urls.map((url) => __awaiter(this, void 0, void 0, function* () {
                if (unsubscribed)
                    return;
                try {
                    yield getTransport(url).check(url);
                    if (unsubscribed)
                        return;
                    if (!seen[url]) {
                        seen[url] = 1;
                        observer.next({
                            type: "add",
                            descriptor: url,
                        });
                    }
                }
                catch (e) {
                    // nothing
                    if (seen[url]) {
                        delete seen[url];
                        observer.next({
                            type: "remove",
                            descriptor: url,
                        });
                    }
                }
            }))))
                .then(() => new Promise(success => setTimeout(success, 5000)))
                .then(checkLoop);
        }
        checkLoop();
        return {
            unsubscribe: () => {
                unsubscribed = true;
            },
        };
    };
    StaticTransport.open = url => getTransport(url).open(url);
    return StaticTransport;
};
//# sourceMappingURL=withStaticURLs.js.map