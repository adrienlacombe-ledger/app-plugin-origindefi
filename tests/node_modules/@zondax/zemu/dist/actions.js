"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TouchNavigation = exports.ClickNavigation = exports.scheduleToNavElement = void 0;
/** ******************************************************************************
 *  (c) 2018 - 2023 Zondax AG
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 ******************************************************************************* */
const buttons_1 = require("./buttons");
function scheduleToNavElement(clickSchedule) {
    const nav = [];
    for (const click of clickSchedule) {
        if (typeof click !== "number") {
            nav.push(click);
            continue;
        }
        if (click === 0) {
            nav.push({
                type: 2 /* ActionKind.BothClick */,
                button: buttons_1.dummyButton,
            });
        }
        else {
            for (let i = 0; i < Math.abs(click); i++) {
                nav.push({
                    type: click > 0 ? 1 /* ActionKind.RightClick */ : 0 /* ActionKind.LeftClick */,
                    button: buttons_1.dummyButton,
                });
            }
        }
    }
    return nav;
}
exports.scheduleToNavElement = scheduleToNavElement;
class ClickNavigation {
    constructor(clickSchedule) {
        this.schedule = scheduleToNavElement(clickSchedule);
    }
}
exports.ClickNavigation = ClickNavigation;
class TouchNavigation {
    constructor(buttonKindArray) {
        this.schedule = [];
        for (const buttonKind of buttonKindArray) {
            const touchButton = buttons_1.TouchElements.get(buttonKind);
            if (touchButton == null)
                throw new Error("Undefined touch action");
            this.schedule.push({
                type: 3 /* ActionKind.Touch */,
                button: touchButton,
            });
        }
    }
}
exports.TouchNavigation = TouchNavigation;
