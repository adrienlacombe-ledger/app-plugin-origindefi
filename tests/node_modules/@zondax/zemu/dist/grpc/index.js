"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const grpc_js_1 = require("@grpc/grpc-js");
const proto_loader_1 = require("@grpc/proto-loader");
const path_1 = require("path");
const PROTO_PATH = (0, path_1.resolve)(__dirname, "zemu.proto");
class GRPCRouter {
    constructor(ip, port, transport) {
        this.httpTransport = transport;
        this.serverAddress = `${ip}:${port}`;
        this.server = new grpc_js_1.Server();
    }
    startServer() {
        const packageDefinition = (0, proto_loader_1.loadSync)(PROTO_PATH, {
            keepCase: true,
            longs: String,
            enums: String,
            defaults: true,
            oneofs: true,
        });
        const rpcDefinition = (0, grpc_js_1.loadPackageDefinition)(packageDefinition);
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const self = this;
        // @ts-expect-error types are missing
        this.server.addService(rpcDefinition.ledger_go.ZemuCommand.service, {
            Exchange(call, callback, ctx = self) {
                void ctx.httpTransport.exchange(call.request.command).then((response) => {
                    callback(null, { reply: response });
                });
            },
        });
        this.server.bindAsync(this.serverAddress, grpc_js_1.ServerCredentials.createInsecure(), (err, port) => {
            if (err != null) {
                console.error(err);
                return;
            }
            process.stdout.write(`gRPC listening on ${port}`);
            this.server.start();
        });
        process.stdout.write(`grpc server started on ${this.serverAddress}`);
    }
    stopServer() {
        this.server.forceShutdown();
    }
}
exports.default = GRPCRouter;
