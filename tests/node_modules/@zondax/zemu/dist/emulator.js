"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_APP_PATH = exports.BOLOS_SDK = exports.DEV_CERT_PRIVATE_KEY = void 0;
/** ******************************************************************************
 *  (c) 2018 - 2023 Zondax AG
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 ******************************************************************************* */
const dockerode_1 = __importDefault(require("dockerode"));
const path_1 = __importDefault(require("path"));
exports.DEV_CERT_PRIVATE_KEY = "ff701d781f43ce106f72dc26a46b6a83e053b5d07bb3d4ceab79c91ca822a66b";
exports.BOLOS_SDK = "/project/deps/nanos-secure-sdk";
exports.DEFAULT_APP_PATH = "/project/app/bin";
class EmuContainer {
    constructor(elfLocalPath, libElfs, image, name) {
        this.image = image;
        this.elfLocalPath = elfLocalPath;
        this.libElfs = libElfs;
        this.name = name;
        this.logging = false;
    }
    static killContainerByName(name) {
        const docker = new dockerode_1.default();
        docker.listContainers({ all: true, filters: { name: [name] } }, (listError, containers) => {
            if (listError != null)
                throw listError;
            if (containers == null || containers.length === 0) {
                console.log("No containers found");
                return;
            }
            containers.forEach((containerInfo) => {
                docker.getContainer(containerInfo.Id).remove({ force: true }, (removeError) => {
                    if (removeError != null)
                        throw removeError;
                });
            });
        });
    }
    static checkAndPullImage(imageName) {
        const docker = new dockerode_1.default();
        docker.pull(imageName, {}, (err, stream) => {
            function onProgress(event) {
                const progress = event?.progress ?? "";
                const status = event?.status ?? "";
                process.stdout.write(`[DOCKER] ${status}: ${progress}\n`);
            }
            function onFinished(err, _output) {
                if (err != null) {
                    process.stdout.write(`[DOCKER] ${err}\n`);
                    throw err;
                }
            }
            if (err != null) {
                process.stdout.write(`[DOCKER] ${err}\n`);
                throw new Error(err);
            }
            docker.modem.followProgress(stream, onFinished, onProgress);
        });
    }
    log(message) {
        if (this.logging ?? false)
            process.stdout.write(`${message}\n`);
    }
    async runContainer(options) {
        const docker = new dockerode_1.default();
        this.logging = options.logging;
        const appFilename = path_1.default.basename(this.elfLocalPath);
        const appDir = path_1.default.dirname(this.elfLocalPath);
        const dirBindings = [`${appDir}:${exports.DEFAULT_APP_PATH}`];
        let libArgs = "";
        Object.entries(this.libElfs).forEach(([libName, libPath]) => {
            const libFilename = path_1.default.basename(libPath);
            libArgs += ` -l ${libName}:${exports.DEFAULT_APP_PATH}/${libFilename}`;
        });
        const modelOptions = options.model !== "" ? options.model : "nanos";
        const customOptions = options.custom;
        const displaySetting = "--display headless";
        const command = `/home/zondax/speculos/speculos.py --log-level speculos:DEBUG --color JADE_GREEN ${displaySetting} ${customOptions} -m ${modelOptions} ${exports.DEFAULT_APP_PATH}/${appFilename} ${libArgs}`;
        this.log(`[ZEMU] Command: ${command}`);
        const portBindings = {
            [`9998/tcp`]: [{ HostPort: options.transportPort }],
            [`5000/tcp`]: [{ HostPort: options.speculosApiPort }],
        };
        if (customOptions.includes("--debug")) {
            portBindings[`1234/tcp`] = [{ HostPort: "1234" }];
        }
        const displayEnvironment = process.platform === "darwin" ? "host.docker.internal:0" : process.env.DISPLAY ?? "";
        const environment = [
            `SCP_PRIVKEY='${exports.DEV_CERT_PRIVATE_KEY}'`,
            `BOLOS_SDK='${exports.BOLOS_SDK}'`,
            `BOLOS_ENV='/opt/bolos'`,
            `DISPLAY='${displayEnvironment}'`,
        ];
        this.log(`[ZEMU] Creating Container ${this.image} - ${this.name} `);
        this.currentContainer = await docker.createContainer({
            Image: this.image,
            name: this.name,
            Tty: true,
            AttachStdout: true,
            AttachStderr: true,
            User: "1000",
            Env: environment,
            HostConfig: {
                PortBindings: portBindings,
                Binds: dirBindings,
            },
            Cmd: [command],
        });
        this.log(`[ZEMU] Connected ${this.currentContainer.id}`);
        if (this.logging) {
            this.currentContainer.attach({ stream: true, stdout: true, stderr: true }, (err, stream) => {
                if (err != null)
                    throw err;
                stream.pipe(process.stdout);
            });
            this.log(`[ZEMU] Attached ${this.currentContainer.id}`);
        }
        await this.currentContainer.start();
        this.log(`[ZEMU] Started ${this.currentContainer.id}`);
    }
    async stop() {
        if (this.currentContainer != null) {
            const container = this.currentContainer;
            delete this.currentContainer;
            this.log(`[ZEMU] Stopping container`);
            try {
                await container.stop({ t: 0 });
            }
            catch (e) {
                this.log(`[ZEMU] Stopping: ${e}`);
                throw e;
            }
            this.log(`[ZEMU] Stopped`);
            try {
                await container.remove();
            }
            catch (err) {
                this.log("[ZEMU] Unable to remove container");
                throw err;
            }
            this.log(`[ZEMU] Removed`);
        }
    }
}
exports.default = EmuContainer;
